<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:sy="http://purl.org/rss/1.0/modules/syndication/" xmlns:media="http://search.yahoo.com/mrss/"><channel><title>Posts on tommy.dev</title><link>https://tommylife88.github.io/posts/</link><description>Recent content in Posts on tommy.dev</description><generator>Hugo -- gohugo.io</generator><language>ja</language><copyright>©2023, All Rights Reserved</copyright><lastBuildDate>Sat, 28 Jan 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://tommylife88.github.io/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>【Flutter】2023年のロードマップ</title><link>https://tommylife88.github.io/posts/2023/2023-01-28-flutter-roadmap-2023/</link><pubDate>Sat, 28 Jan 2023 00:00:00 +0000</pubDate><atom:modified>Sat, 28 Jan 2023 00:00:00 +0000</atom:modified><guid>https://tommylife88.github.io/posts/2023/2023-01-28-flutter-roadmap-2023/</guid><description>GitHubのWiki-Roadmapが更新されていました。 技術的な負債とチームの速度 プロジェクトの全体的な速度を上げる。 技術的負債の削減を</description><dc:creator>tommy</dc:creator><category>flutter</category><category>Dart</category><category>flutter</category></item><item><title>WSL2に機械学習環境を構築（NVIDIA GPU, Anaconda, TensorFlow, PyTorch）</title><link>https://tommylife88.github.io/posts/2022/2022-06-14-nvidia-gpu-anaconda-tf-torch/</link><pubDate>Tue, 14 Jun 2022 00:00:00 +0000</pubDate><atom:modified>Tue, 14 Jun 2022 00:00:00 +0000</atom:modified><guid>https://tommylife88.github.io/posts/2022/2022-06-14-nvidia-gpu-anaconda-tf-torch/</guid><description>GPUありのWindowsマシンのWSL2に機械学習環境を立てた。 WSL2 インストール済み前提。 1 2 3 4 5 6 7 8 9 10 11 $ wsl -l -v NAME STATE VERSION * Ubuntu Stopped 2 $ wsl --status</description><dc:creator>tommy</dc:creator><category>ML</category><category>Anaconda</category><category>TensorFlow</category><category>PyTorch</category><category>ML</category></item><item><title>【FVM】Flutter SDKの複数バージョン管理</title><link>https://tommylife88.github.io/posts/2022/2022-02-15-flutter-fvm/</link><pubDate>Tue, 15 Feb 2022 00:00:00 +0000</pubDate><atom:modified>Tue, 15 Feb 2022 00:00:00 +0000</atom:modified><guid>https://tommylife88.github.io/posts/2022/2022-02-15-flutter-fvm/</guid><description>プロジェクト毎にFlutter SDKのバージョンを切り替えたい。 FVM(Flutter Version Management) https://fvm.app/ インストールした手順 Flutterの要件を満たしている前提。 https://fvm.app/docs/getting_started/installation をみる</description><dc:creator>tommy</dc:creator><category>Flutter</category><category>FVM</category><category>Flutter</category></item><item><title>Git cloneで--recursive忘れて、後からsubmoduleをcloneしたいときの対処</title><link>https://tommylife88.github.io/posts/2022/2022-02-09-git-submodule-init-lator/</link><pubDate>Wed, 09 Feb 2022 00:00:00 +0000</pubDate><atom:modified>Wed, 09 Feb 2022 00:00:00 +0000</atom:modified><guid>https://tommylife88.github.io/posts/2022/2022-02-09-git-submodule-init-lator/</guid><description>いつも忘れるんだよなあ。 submoduleありのリポジトリをcloneする際、 1 git clone --recursive &amp;lt;repo url&amp;gt; でsubmoduleをcloneできるところを、-</description><dc:creator>tommy</dc:creator><category>Git</category><category>Git</category></item><item><title>Dartのカスケード記法（../?..）</title><link>https://tommylife88.github.io/posts/2022/2022-01-26-dart-cascade-notation/</link><pubDate>Wed, 26 Jan 2022 00:00:00 +0000</pubDate><atom:modified>Wed, 26 Jan 2022 00:00:00 +0000</atom:modified><guid>https://tommylife88.github.io/posts/2022/2022-01-26-dart-cascade-notation/</guid><description>Dartの..や?..って何？ってよく聞かれるので。 【公式】Cascade notation（カスケード記法）って呼ばれるもの。 カスケード記法</description><dc:creator>tommy</dc:creator><category>Dart</category><category>Dart</category></item><item><title>【Flutter】2022年のロードマップ</title><link>https://tommylife88.github.io/posts/2022/2022-01-16-flutter-roadmap-2022/</link><pubDate>Sun, 16 Jan 2022 00:00:00 +0000</pubDate><atom:modified>Sun, 16 Jan 2022 00:00:00 +0000</atom:modified><guid>https://tommylife88.github.io/posts/2022/2022-01-16-flutter-roadmap-2022/</guid><description>GitHubのWiki-Roadmapが更新されていました。 フォーカスする領域 開発者体験 開発者が愛するSDKにする。 一般的な問題を解決するW</description><dc:creator>tommy</dc:creator><category>flutter</category><category>Dart</category><category>flutter</category></item><item><title>Flutterハンズオン</title><link>https://tommylife88.github.io/posts/2021/2021-11-05-flutter-handson/</link><pubDate>Fri, 05 Nov 2021 00:00:00 +0000</pubDate><atom:modified>Fri, 05 Nov 2021 00:00:00 +0000</atom:modified><guid>https://tommylife88.github.io/posts/2021/2021-11-05-flutter-handson/</guid><description>Flutterハンズオン。ちょっと触れる機会があったので備忘録として。 Googleによって開発されたOSSなUIのSDK。単一のコードベース</description><dc:creator>tommy</dc:creator><category>flutter</category><category>Dart</category><category>flutter</category></item><item><title>M1 MacにNode.jsとYarnをインストール</title><link>https://tommylife88.github.io/posts/2021/2021-10-31-install-nodejs-yarn-to-mac-m1/</link><pubDate>Sat, 30 Oct 2021 00:00:00 +0000</pubDate><atom:modified>Sat, 30 Oct 2021 00:00:00 +0000</atom:modified><guid>https://tommylife88.github.io/posts/2021/2021-10-31-install-nodejs-yarn-to-mac-m1/</guid><description>M1 MacにNode.jsインストール。 ネットにはいろいろやり方があるけど自分用に整理した。 （MacはAppleシリコンやらで情報が錯綜しがち</description><dc:creator>tommy</dc:creator><category>Mac</category><category>MacM1</category><category>Node</category><category>Nodenv</category><category>Yarn</category><category>Node</category></item><item><title>AsciiDocチートシートを作った</title><link>https://tommylife88.github.io/posts/2021/2021-10-29-asciidoc/</link><pubDate>Fri, 29 Oct 2021 00:00:00 +0000</pubDate><atom:modified>Fri, 29 Oct 2021 00:00:00 +0000</atom:modified><guid>https://tommylife88.github.io/posts/2021/2021-10-29-asciidoc/</guid><description>軽量マークアップ言語でメジャーといえばmarkdownだけど、より高度な文書の論理構造を構築することが可能なAsciiDocが良き。 公式にあ</description><dc:creator>tommy</dc:creator><category>AsciiDoc</category><category>Asciidoctor</category><category>AsciiDoc</category></item><item><title>PowerShellで簡単バックグランド実行</title><link>https://tommylife88.github.io/posts/2021/2021-07-02-powershell-background/</link><pubDate>Fri, 02 Jul 2021 00:00:00 +0000</pubDate><atom:modified>Fri, 02 Jul 2021 00:00:00 +0000</atom:modified><guid>https://tommylife88.github.io/posts/2021/2021-07-02-powershell-background/</guid><description>PowerShellのジョブのバックグラウンド実行したい。Start-Jobめんどくさい。Linuxみたく、演算子&amp;quot;&amp;amp;&amp;l</description><dc:creator>tommy</dc:creator><category>PowerShell</category><category>PowerShell</category></item><item><title>パフォーマンスモニタ カウンターを手動で復元する方法</title><link>https://tommylife88.github.io/posts/2021/2021-07-01-restore-performance-counter/</link><pubDate>Thu, 01 Jul 2021 00:00:00 +0000</pubDate><atom:modified>Thu, 01 Jul 2021 00:00:00 +0000</atom:modified><guid>https://tommylife88.github.io/posts/2021/2021-07-01-restore-performance-counter/</guid><description>Windowsのパフォーマンスモニタツールの一部カウンターが選択できなくなった。 サーバー 2008 64 ビットまたは Windows Server 2008 R2 システムのパフォーマンス カウ</description><dc:creator>tommy</dc:creator><category>Windows</category><category>パフォーマンスカウンター</category></item><item><title>AGL（Automotive Grade Linux）ことはじめ</title><link>https://tommylife88.github.io/posts/2021/2021-06-15-agl-demo/</link><pubDate>Tue, 15 Jun 2021 00:00:00 +0000</pubDate><atom:modified>Tue, 15 Jun 2021 00:00:00 +0000</atom:modified><guid>https://tommylife88.github.io/posts/2021/2021-06-15-agl-demo/</guid><description>AGL（Automotive Grade Linux）やってみた。 #0_Getting_Started/1_Quickstart/Using_Ready_Made_Images/ のx86 (Emulation and Hardware)をやってみた。 試した環境 1 2 3 4 5 6 7 8 9 # Distro $ cat /etc/lsb-release DISTRIB_ID=Ubuntu</description><dc:creator>tommy</dc:creator><category>AGL</category><category>Ubuntu</category><category>Linux</category><category>AGL</category></item><item><title>VSCodeでお勧めの拡張機能を共有する</title><link>https://tommylife88.github.io/posts/2021/2021-06-01-vscode-extensions/</link><pubDate>Tue, 01 Jun 2021 00:00:00 +0000</pubDate><atom:modified>Tue, 01 Jun 2021 00:00:00 +0000</atom:modified><guid>https://tommylife88.github.io/posts/2021/2021-06-01-vscode-extensions/</guid><description>チームでVSCodeで開発するときに、「この拡張機能は入れておけ」ってあると思う。 そんな時、VSCodeでお勧めの拡張機能に出す出さないを.</description><dc:creator>tommy</dc:creator><category>VSCode</category><category>VSCode</category></item><item><title>Markdown Syntax Guide</title><link>https://tommylife88.github.io/posts/demo-markdown-syntax/</link><pubDate>Tue, 25 May 2021 00:00:00 +0000</pubDate><atom:modified>Tue, 25 May 2021 00:00:00 +0000</atom:modified><guid>https://tommylife88.github.io/posts/demo-markdown-syntax/</guid><description>&lt;p>This article offers a sample of basic Markdown syntax that can be used in Hugo content files, also it shows whether basic HTML elements are decorated with CSS in a Hugo theme.&lt;/p></description><dc:creator>tommy</dc:creator><category>markdown</category><category>demo</category></item><item><title>Syntax highlighting</title><link>https://tommylife88.github.io/posts/demo-syntax-highlight/</link><pubDate>Tue, 25 May 2021 00:00:00 +0000</pubDate><atom:modified>Tue, 25 May 2021 00:00:00 +0000</atom:modified><guid>https://tommylife88.github.io/posts/demo-syntax-highlight/</guid><description>Code Syntax Highlighting Verify the following code blocks render as code blocks and highlight properly. More about tuning syntax highlighting is the Hugo documentation. Diff 1 2 3 4 5 6 7 8 9 10 *** /path/to/original &amp;#39;&amp;#39;timestamp&amp;#39;&amp;#39; --- /path/to/new &amp;#39;&amp;#39;timestamp&amp;#39;&amp;#39; *************** *** 1 **** ! This is a line. --- 1 --- ! This is a replacement line. It is important to spell -removed line +new line *** /path/to/original</description><dc:creator>tommy</dc:creator><category>demo</category></item><item><title>Docker上のJenkinsからホストのDockerを使う（DooD）</title><link>https://tommylife88.github.io/posts/2020/2020-08-29-jenkins-dood/</link><pubDate>Sat, 29 Aug 2020 00:00:00 +0000</pubDate><atom:modified>Sat, 29 Aug 2020 00:00:00 +0000</atom:modified><guid>https://tommylife88.github.io/posts/2020/2020-08-29-jenkins-dood/</guid><description>Jenkinsサーバーのビルド環境をクリーンに保ちたいのでDockerコンテナでCIを回したい。 その環境作成メモ。 っていうか、これやるなら、</description><dc:creator>tommy</dc:creator><category>Jenkins</category><category>Docker</category><category>Docker</category></item><item><title>NTPでサーバーの時刻合わせ【Ubuntu 18.04】</title><link>https://tommylife88.github.io/posts/2020/2020-02-09-ntp-on-ubuntu1804/</link><pubDate>Sun, 09 Feb 2020 00:00:00 +0000</pubDate><atom:modified>Sun, 09 Feb 2020 00:00:00 +0000</atom:modified><guid>https://tommylife88.github.io/posts/2020/2020-02-09-ntp-on-ubuntu1804/</guid><description>NTPでサーバーの時刻合わせ【Ubuntu 18.04】 NTPは「Network Time Protocol」の略で、ネットワーク上でクライアントがサー</description><dc:creator>tommy</dc:creator><category>ntp</category><category>Ubuntu</category></item><item><title>Redmineをアップデートする手順（Ubuntu 18.04 LTS Server）</title><link>https://tommylife88.github.io/posts/2020/2020-01-20-update-redmine-on-ubuntu1804/</link><pubDate>Mon, 20 Jan 2020 00:00:00 +0000</pubDate><atom:modified>Mon, 20 Jan 2020 00:00:00 +0000</atom:modified><guid>https://tommylife88.github.io/posts/2020/2020-01-20-update-redmine-on-ubuntu1804/</guid><description>Redmine 4.0をUbuntu 18.04 LTS Serverにインストールする手順 で構築したRedmineをアップデート／バージョンアップする。 アップデート準備 ま</description><dc:creator>tommy</dc:creator><category>Redmine</category><category>Ubuntu</category><category>WEB</category></item><item><title>Redmine 4.0をUbuntu 18.04 LTS Serverにインストールする手順</title><link>https://tommylife88.github.io/posts/2020/2020-01-15-install-redmine-to-ubuntu1804/</link><pubDate>Wed, 15 Jan 2020 00:00:00 +0000</pubDate><atom:modified>Wed, 15 Jan 2020 00:00:00 +0000</atom:modified><guid>https://tommylife88.github.io/posts/2020/2020-01-15-install-redmine-to-ubuntu1804/</guid><description>最小構成でインストールしたUbuntu 18.04.1 LTS ServerにRedmine 4.0をインストールする手順を残しておく。 UbuntuのLTSの最新は</description><dc:creator>tommy</dc:creator><category>Redmine</category><category>Ubuntu</category><category>WEB</category></item><item><title>Makefileテンプレート作った</title><link>https://tommylife88.github.io/posts/2019/2019-12-01-makefile-template/</link><pubDate>Sun, 01 Dec 2019 00:00:00 +0000</pubDate><atom:modified>Sun, 01 Dec 2019 00:00:00 +0000</atom:modified><guid>https://tommylife88.github.io/posts/2019/2019-12-01-makefile-template/</guid><description>Makefileって作るときはいろいろ調べながら作るけど、一度作るとそれ以上触ることないので、よく忘れる。備忘録も兼ねてテンプレとして残して</description><dc:creator>tommy</dc:creator><category>makefile</category><category>gcc</category></item><item><title>Dockerコンテナをエクスポート／インポートする</title><link>https://tommylife88.github.io/posts/2019/2019-11-22-export-docker-container/</link><pubDate>Fri, 22 Nov 2019 00:00:00 +0000</pubDate><atom:modified>Fri, 22 Nov 2019 00:00:00 +0000</atom:modified><guid>https://tommylife88.github.io/posts/2019/2019-11-22-export-docker-container/</guid><description>Dockerレジストリを経由せず、Dockerイメージをファイルとして配布したい。 コンテナをtarファイル化 docker export使う。 1 $ docker export &amp;lt;container id&amp;gt;</description><dc:creator>tommy</dc:creator><category>Docker</category><category>Docker</category></item><item><title>Dockerコンテナのログのクリア方法とローテーション設定</title><link>https://tommylife88.github.io/posts/2019/2019-11-20-docker-log-rotation/</link><pubDate>Wed, 20 Nov 2019 00:00:00 +0000</pubDate><atom:modified>Wed, 20 Nov 2019 00:00:00 +0000</atom:modified><guid>https://tommylife88.github.io/posts/2019/2019-11-20-docker-log-rotation/</guid><description>dockerで起動しっぱなしのコンテナのログがディスクを圧迫していたので、ログを消去する方法と、ついでにログのローテーション設定を行った。 d</description><dc:creator>tommy</dc:creator><category>Docker</category><category>Docker</category></item><item><title>「祝★LPIC-3認定」LPIC304に合格するために必要なこと</title><link>https://tommylife88.github.io/posts/2019/2019-08-03-linux-lpic3/</link><pubDate>Sat, 03 Aug 2019 00:00:00 +0000</pubDate><atom:modified>Sat, 03 Aug 2019 00:00:00 +0000</atom:modified><guid>https://tommylife88.github.io/posts/2019/2019-08-03-linux-lpic3/</guid><description>LPIC-3（304：仮想化とハイアベイラビリティ）試験を受けて、無事一発合格してきました。記念してどう対策してきたかを記事にしたいと思いま</description><dc:creator>tommy</dc:creator><category>Linux</category><category>LPIC</category><category>LPIC-3</category><category>Linux</category><category>LPIC</category></item><item><title>「祝★LPIC-2認定」LPIC201,202に合格するために必要なこと</title><link>https://tommylife88.github.io/posts/2019/2019-08-02-linux-lpic2/</link><pubDate>Fri, 02 Aug 2019 00:00:00 +0000</pubDate><atom:modified>Fri, 02 Aug 2019 00:00:00 +0000</atom:modified><guid>https://tommylife88.github.io/posts/2019/2019-08-02-linux-lpic2/</guid><description>LPIC-2（201、202）試験を受けて、無事一発合格してきました。記念してこれまでの経緯やどう対策してきたかを記事にしたいと思います。 L</description><dc:creator>tommy</dc:creator><category>Linux</category><category>LPIC</category><category>LPIC-2</category><category>Linux</category><category>LPIC</category></item><item><title>「超簡単」仮想環境でWiki「GROWI」を導入する（Markdown対応）</title><link>https://tommylife88.github.io/posts/2018/2018-12-13-growi-on-docker-on-vagrant/</link><pubDate>Thu, 13 Dec 2018 00:00:00 +0000</pubDate><atom:modified>Thu, 13 Dec 2018 00:00:00 +0000</atom:modified><guid>https://tommylife88.github.io/posts/2018/2018-12-13-growi-on-docker-on-vagrant/</guid><description>仕事でいまだに業務のノウハウとかをExcelファイルで管理してませんか？ いちいちくそ重いExcelを起動して、セルを方眼紙みたくして、さらに</description><dc:creator>tommy</dc:creator><category>Markdown</category><category>Wiki</category><category>vagrant</category><category>docker</category><category>docker-compose</category><category>WEB</category></item><item><title>「Linuxに触れる」パッケージのソースを落としてビルド、デバッグする方法</title><link>https://tommylife88.github.io/posts/2018/2018-10-11-linux-debug-package/</link><pubDate>Thu, 11 Oct 2018 00:00:00 +0000</pubDate><atom:modified>Thu, 11 Oct 2018 00:00:00 +0000</atom:modified><guid>https://tommylife88.github.io/posts/2018/2018-10-11-linux-debug-package/</guid><description>こんな人に読んでほしい。 Linux開発に触れてみたい Linux開発始めたいけど、いまいち何から手をつけたらいいか分からない Linuxのコマン</description><dc:creator>tommy</dc:creator><category>Linux</category><category>gdb</category><category>Linux</category></item><item><title>WordPress本番環境をローカル環境にコピー（複製）する方法</title><link>https://tommylife88.github.io/posts/2018/2018-03-02-wp-copy-to-local-env/</link><pubDate>Fri, 02 Mar 2018 00:00:00 +0000</pubDate><atom:modified>Fri, 02 Mar 2018 00:00:00 +0000</atom:modified><guid>https://tommylife88.github.io/posts/2018/2018-03-02-wp-copy-to-local-env/</guid><description>本番環境のWordPressでテーマやCSS、プラグインを編集するには勇気がいるものです。 そこでローカル環境にいま動いているWordPres</description><dc:creator>tommy</dc:creator><category>WordPress</category><category>WordPress</category></item><item><title>ローカル環境にWordPress環境を構築する方法</title><link>https://tommylife88.github.io/posts/2018/2018-03-01-wp-setup-local/</link><pubDate>Thu, 01 Mar 2018 00:00:00 +0000</pubDate><atom:modified>Thu, 01 Mar 2018 00:00:00 +0000</atom:modified><guid>https://tommylife88.github.io/posts/2018/2018-03-01-wp-setup-local/</guid><description>WordPressのバージョン4.x系から5.x系にバージョンアップする際に、今動いているサイト（テーマやプラグインいろいろ）がちゃんと動作</description><dc:creator>tommy</dc:creator><category>WordPress</category><category>Local</category><category>WordPress</category></item></channel></rss>